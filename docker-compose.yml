version: '3.8'

# Defines a reusable configuration block for environment variables
# This will be used by services that need access to the config file values
x-environment: &default-env
  # Secrets are loaded from the root .env file by Docker Compose automatically
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  GEMINI_API_KEY: ${GEMINI_API_KEY}
  
  # Non-secret configs are now read from the mounted config.yml
  # The services will need to be updated to read these from env vars
  # which we will populate below.

services:
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: opensearch_node
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g
      - bootstrap.memory_lock=true
      - "DISABLE_SECURITY_PLUGIN=true"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - rass_network
    healthcheck:
      test: ["CMD-SHELL", "curl -sS -k http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.2-alpine
    container_name: redis_node
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - rass_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes --appendfsync everysec

  embedding-service:
    build:
      context: ./embedding-service
      dockerfile: Dockerfile
    container_name: embedding_service_app
    ports:
      - "8001:8001"
    volumes:
      - ./embedding-service/uploads:/usr/src/app/embedding-service/uploads
      - ./config.yml:/usr/src/app/embedding-service/config.yml:ro # Mount config read-only
    # The 'env_file' is now removed. Environment is handled below.
    environment:
      <<: *default-env # Inherit secrets
      # We will add non-secret vars from config.yml here in the next step
    depends_on:
      opensearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rass_network
    restart: unless-stopped

  rass-engine-service:
    build:
      context: ./rass-engine-service
      dockerfile: Dockerfile
    container_name: rass_engine_app
    ports:
      - "8000:8000"
    volumes:
      - ./config.yml:/usr/src/app/rass-engine-service/config.yml:ro # Mount config read-only
    # The 'env_file' is now removed.
    environment:
      <<: *default-env # Inherit secrets
    depends_on:
      opensearch:
        condition: service_healthy
      py_reranker:
        condition: service_started
    networks:
      - rass_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: mcp_server_app
    ports:
      - "8080:8080"
    volumes:
      - ./embedding-service/uploads:/usr/src/app/uploads:ro
    # No environment variables needed for this service currently
    networks:
      - rass_network
    depends_on:
      rass-engine-service:
        condition: service_healthy
    restart: unless-stopped
  
  py_reranker:
    build:
      context: ./rass-engine-service/py_reranker
    ports:
      - "8008:8008"
    volumes:
      - ./config.yml:/app/config.yml:ro # Mount config read-only
    # Environment variables will be added in the next step
    networks:
      - rass_network
    restart: unless-stopped

networks:
  rass_network:
    driver: bridge

volumes:
  opensearch-data:
    driver: local
  redis-data:
    driver: local